syntax = "proto3";

service BridgeOperator {
    // Get signatures of anchoring messages on aergo1 and aergo2
    rpc GetAnchorSignature(Anchor) returns (Approval) {}

    // Get signature to update anchoring periode
    rpc GetTAnchorSignature(NewTempo) returns (Approval) {}
    // Get signature to update finality
    rpc GetTFinalSignature(NewTempo) returns (Approval) {}

    // Get signature to update validators of anchors
    rpc GetValidatorsSignature(NewValidators) returns (Approval) {}

    // Get signature to update bridge oracle
    rpc GetOracleSignature(NewOracle) returns (Approval) {}
}

message Anchor {
    // flag to know which chain this anchor is from
    bool is_from_mainnet = 1;
    // root to be merged on sidechain
    string root = 2;
    // height to be merged on sidechain
    uint64 height = 3;
    // sidechain update nonce
    uint64 destination_nonce = 4;
}

message Approval {
    // address of the private key that produced sig1 and sig2
    string address = 1;
    // signature of anchor
    bytes sig = 2;
    // error message why the requested anchor is invalid
    string error = 3;
}

message NewTempo {
    // flag to know which chain this tempo is from
    bool is_from_mainnet = 1;
    // anchoring periode or finality
    uint64 tempo = 2;
    // eth bridge update nonce
    uint64 destination_nonce = 3;
}

message NewValidators {
    // flag to know which chain these validators check
    bool is_from_mainnet = 1;
    // validators addresses : 'A...' 
    repeated string validators = 2;
    // eth bridge update nonce
    uint64 destination_nonce = 3;
}

message NewOracle {
    // flag to know from which chain the oracle in validating anchors
    bool is_from_mainnet = 1;
    // oracle address : 'A...' 
    string oracle = 2;
    // oracle update nonce
    uint64 destination_nonce = 3;
}